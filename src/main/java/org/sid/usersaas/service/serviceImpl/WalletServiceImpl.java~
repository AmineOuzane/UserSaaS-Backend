package org.sid.usersaas.service.serviceImpl;

import lombok.AllArgsConstructor;
import org.sid.usersaas.entities.AppUser;
import org.sid.usersaas.entities.CreditTransaction;
import org.sid.usersaas.entities.UsageRecord;
import org.sid.usersaas.entities.UsageType;
import org.sid.usersaas.enums.ServiceCategory;
import org.sid.usersaas.enums.TransactionSource;
import org.sid.usersaas.repository.AppUserRepository;
import org.sid.usersaas.repository.UsageRecordRepository;
import org.sid.usersaas.repository.UsageTypeRepository;
import org.sid.usersaas.service.WalletService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Service
@AllArgsConstructor
@Transactional
public class WalletServiceImpl implements WalletService {

	private AppUserRepository appUserRepository;
    private UsageRecordRepository usageRecordRepository;
    private UsageTypeRepository usageTypeRepository;

    @Override
    public BigDecimal getUserWalletBalance(String username) {
        AppUser appUser = appUserRepository.findByUsername(username);
        if (appUser == null) {
            throw new RuntimeException("User not found");
        }
        return appUser.getWalletBalance();
    }

    @Override
    public CreditTransaction addCreditsToUser(String username, BigDecimal amount) {
        AppUser appUser = appUserRepository.findByUsername(username);
        if (appUser == null) {
            throw new RuntimeException("User not found");
        }
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Amount must be positive");
        }

        // Update the user's wallet balance
        BigDecimal newBalance = appUser.getWalletBalance().add(amount);
        appUser.setWalletBalance(newBalance);
        appUserRepository.save(appUser);

        return CreditTransaction.builder()
                .amount(amount)
                .balanceAfterTransaction(newBalance)
                .transactionDate(LocalDateTime.now())
                .transactionType(TransactionSource.ADD_FUNDS)
                .appUser(appUser)
                .build();
        // No UsageRecord created because its used only for recording the use of the whatsapp service not the wallet
    }

    @Override
    public CreditTransaction deductCreditsForUsage(String username, String usageTypeId) {
        AppUser appUser = appUserRepository.findByUsername(username);

        UsageType usageType = usageTypeRepository.findById(usageTypeId)
                .orElseThrow(() -> new RuntimeException("Usage type not found with id: " + usageTypeId));
        BigDecimal amount = usageType.getUnitPrice();

        if (appUser == null) {
            throw new RuntimeException("User not found");
        }
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Amount must be positive");
        }
        if (appUser.getWalletBalance().compareTo(amount) < 0) {
            throw new IllegalStateException("Insufficient funds in wallet");
        }

        // Update the user's wallet balance
        BigDecimal newBalance = appUser.getWalletBalance().subtract(amount);
        appUser.setWalletBalance(newBalance);
        appUserRepository.save(appUser);


        // Create and save the UsageRecord
        UsageRecord usageRecord = UsageRecord.builder()
                .amount(amount)
                .timestamp(LocalDateTime.now())
                .appUser(appUser)
                .usageType(usageTypeRepository.findById(usageTypeId)
                        .orElseThrow(() -> new RuntimeException("Usage type not found")))
                .build();
        usageRecordRepository.save(usageRecord);

        return CreditTransaction.builder()
                .amount(amount)
                .balanceAfterTransaction(newBalance)
                .transactionDate(LocalDateTime.now())
                .transactionType(TransactionSource.PAY_AS_YOU_GO)
                .appUser(appUser)
                .usageRecord(usageRecord)
                .build();

    }
}
